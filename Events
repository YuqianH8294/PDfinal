#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <random>
#include <functional>
#include <unistd.h> // Windows 平台專屬
#include <fstream>
using namespace std;

void showTXT(const string& filename){
        ifstream file(filename);
        if (file.is_open()) {
            string line;
            while (getline(file, line)) {
                cout << line << endl;
            }
            file.close();
        }
        else cout << "open file failure!";
    }
// 狀態效果
struct Status {
    string name;
    int duration;
    function<void(class Player&)> effect;
};

// 主角類別
class Player {
private:
    string playerName;
    int academic;      // 學科能力
    int popularity;    // 人緣
    int charm;        // 魅力
    int stamina;       // 體能
    int fatigue;      // 疲勞值
    int lucky;      // 幸運值
    int move;       // 行動點數
    vector<Status> statuses;  // 狀態效果
    map<string, bool> flags;  // 劇情標記

public:
    
    Player() : academic(0), popularity(0), charm(50), stamina(0),fatigue(0),lucky(5),move(30){}
    Player(const string& playerName, const int& type){
        this->playerName = playerName;
        if(type == 1){
            cout << "你是一個 NERD";
        }
    }

    void setPlayer(string playerName, int type){
        if(type == 1){
            
        }
        else if (type == 2)
        {
            /* code */
        }
        else if (type == 3)
        {
            /* code */
        }
        
        
    }

    void updateStatus() {
        for(auto it = statuses.begin(); it != statuses.end();) {
            it->effect(*this);
            if(--(it->duration) <= 0) {
                it = statuses.erase(it);
            } else {
                ++it;
            }
        }
    }

    // Getters and setters
    void modifyStats(int aca, int pop, int chr, int stamina, int fat, int lucky) {
        academic += aca;
        popularity += pop;
        charm += chr;
        fatigue += fat;
        stamina += stamina;
        lucky += lucky;
    }
    int getAcademic(){return academic;};
    int getPopularity(){return popularity;};    // 人緣
    int getCharm(){return charm;};        // 魅力
    int getFatigue(){return fatigue;};      // 疲勞值
    int getLucky(){return lucky;};
    int getStamina(){return stamina;};
    string getName(){return playerName;};
};

// NPC角色類別
class Character {
private:
    string name;
    int affection;     // 好感度
    vector<pair<int, string>> dialogues;  // 好感度門檻與對應對話
    map<int, function<void(Player&)>> specialEvents;  // 特殊事件

public:
    Character(string n) : name(n), affection(0) {}
    
    void addDialogue(int threshold, string text) {
        dialogues.push_back({threshold, text});
    }
    
    void addSpecialEvent(int threshold, function<void(Player&)> event) {
        specialEvents[threshold] = event;
    }
    
    string getCurrentDialogue() const {
        string current;
        for(const auto& d : dialogues) {
            if(affection >= d.first) {
                current = d.second;
            }
        }
        return current;
    }
};

// 地點類別
class Location {
    string name;
    vector<string> availableCharacters;
    vector<pair<string, function<void(Player&)>>> actions;
};

class Events //can be random events
{
protected:
    string description; //e.g. “上學快遲到時在路上遇到老阿伯，快紅燈了他卻還在慢慢過馬路...你會...”
    string choicesD; //e.g. “1. 扶著他快速通過 2. murmur：「真是馬路三寶」 3. 當作沒看到快去趕課“
    int resultOneL1 [6]; //e.g.
    int resultOneL2 [6];
    int resultTwoL1 [6];
    int resultTwoL2 [6];
    int resultThreeL1 [6];
    int resultThreeL2 [6];
    int standardOne [2];
    int standardTwo [2];
    int standardThree [3];
    string resultOneD1;
    string resultOneD2;
    string resultTwoD1;
    string resultTwoD2;
    string resultThreeD1;
    string resultThreeD2;
    
public:
    Events(string description = "", string choicesD = "");
    void setResultOne1(int a, int b, int c, int d, int e, int f, string resultOneD1, int stdIndex, int stdThreshold);
    void setResultOne2(int a, int b, int c, int d, int e, int f, string resultOneD2);
    void setResultTwo1(int a, int b, int c, int d, int e, int f, string resultTwoD1, int stdIndex, int stdThreshold);
    void setResultTwo2(int a, int b, int c, int d, int e, int f, string resultTwoD2);
    void setResultThree1(int a, int b, int c, int d, int e, int f, string resultThreeD1, int stdIndex, int stdThreshold);
    void setResultThree2(int a, int b, int c, int d, int e, int f, string resultThreeD2);
    virtual bool checkThreshold(Player& p, int week);
    void makeChoices(Player& p, int week);
    
};

Events::Events(string description, string choicesD):description(description), choicesD(choicesD) {}

void Events::setResultOne1(int a, int b, int c, int d, int e, int f, string resultOneD1, int stdIndex, int stdThreshold){
    int temp[] = {a, b, c, d, e, f};
        for (int i = 0; i < 6; ++i) {
            resultOneL1[i] = temp[i];
        }
    this->resultOneD1 = resultOneD1;
    this->standardOne[0] = stdIndex;
    this->standardOne[1] = stdThreshold;
}
void Events::setResultOne2(int a, int b, int c, int d, int e, int f, string resultOneD2){
    int temp[] = {a, b, c, d, e, f};
        for (int i = 0; i < 6; ++i) {
            resultOneL2[i] = temp[i];
        }
    this->resultOneD2 = resultOneD2;
}
void Events::setResultTwo1(int a, int b, int c, int d, int e, int f, string resultTwoD1, int stdIndex, int stdThreshold){
    int temp[] = {a, b, c, d, e, f};
        for (int i = 0; i < 6; ++i) {
            resultTwoL1[i] = temp[i];
        }
    this->resultTwoD1 = resultTwoD1;
    this->standardTwo[0] = stdIndex;
    this->standardTwo[1] = stdThreshold;
}
void Events::setResultTwo2(int a, int b, int c, int d, int e, int f, string resultTwoD2){
    int temp[] = {a, b, c, d, e, f};
        for (int i = 0; i < 6; ++i) {
            resultTwoL2[i] = temp[i];
        }
    this->resultTwoD2 = resultTwoD2;
}
void Events::setResultThree1(int a, int b, int c, int d, int e, int f, string resultThreeD1, int stdIndex, int stdThreshold){
    int temp[] = {a, b, c, d, e, f};
        for (int i = 0; i < 6; ++i) {
            resultTwoL1[i] = temp[i];
        }
    this->resultThreeD1 = resultThreeD1;
    this->standardThree[0] = stdIndex;
    this->standardThree[1] = stdThreshold;
}
void Events::setResultThree2(int a, int b, int c, int d, int e, int f, string resultThreeD2){
    int temp[] = {a, b, c, d, e, f};
        for (int i = 0; i < 6; ++i) {
            resultTwoL2[i] = temp[i];
        }
    this->resultThreeD2 = resultThreeD2;
}

void Events::makeChoices(Player& p, int week){
    cout << description << endl;
    cout << choicesD << endl;
    int choice = 0;
    while(true){
        cin >> choice;
        if (choice == 1 || choice == 2 || choice == 3 || choice == 4) {
            break;
        }
        else{
            cout << "是不是就叫你輸入1到3 再玩一次試試看啊";
        }
    }
    
    int playerPoints[] = {standardOne[0], standardTwo[0], standardThree[0]};
    for (int i = 0; i < 3; i++) {
        switch (playerPoints[i]) {
            case 1:
                playerPoints[i] = p.getAcademic();
                break;
            case 2:
                playerPoints[i] = p.getPopularity();
                break;
            case 3:
                playerPoints[i] = p.getCharm();
                break;
            case 4:
                playerPoints[i] = p.getFatigue();
                break;
            case 5:
                playerPoints[i] = p.getLucky();
                break;
                
            default:
                break;
        }
    }
    
    switch (choice) {
        case 1:
            if (playerPoints[0] >= standardOne[1]*week) {
                cout << resultOneD1 << endl;
                p.modifyStats(resultOneL1[0], resultOneL1[1], resultOneL1[2], resultOneL1[3], resultOneL1[4], resultOneL1[5]);
                cout << "你的能力值增減為： " << "學科能力" << resultOneL1[0] << "，" << "人緣" << resultOneL1[1] << "，" << "魅力" << resultOneL1[2] << "，" << "體能" << resultOneL1[3] << "，" << "疲勞值" << resultOneL1[4] << "，" << "幸運" << resultOneL1[5] << "。" << endl;
            }
            else{
                cout << resultOneD2 << endl;
                p.modifyStats(resultOneL2[0], resultOneL2[1], resultOneL2[2], resultOneL2[3], resultOneL2[4], resultOneL2[5]);
                cout << "你的能力值增減為： " << "學科能力" << resultOneL2[0] << "，" << "人緣" << resultOneL2[1] << "，" << "魅力" << resultOneL2[2] << "，" << "體能" << resultOneL2[3] << "，" << "疲勞值" << resultOneL2[4] << "，" << "幸運" << resultOneL2[5] << "。" << endl;
            }
            break;
        case 2:
            if (playerPoints[1] >= standardTwo[1]*week) {
                cout << resultTwoD1 << endl;
                p.modifyStats(resultTwoL1[0], resultTwoL1[1], resultTwoL1[2], resultTwoL1[3], resultTwoL1[4], resultTwoL1[5]);
                cout << "你的能力值增減為： " << "學科能力" << resultTwoL1[0] << "，" << "人緣" << resultTwoL1[1] << "，" << "魅力" << resultTwoL1[2] << "，" << "體能" << resultTwoL1[3] << "，" << "疲勞值" << resultTwoL1[4] << "，" << "幸運" << resultTwoL1[5] << "。" << endl;
            }
            else{
                cout << resultTwoD2 << endl;
                p.modifyStats(resultTwoL2[0], resultTwoL2[1], resultTwoL2[2], resultTwoL2[3], resultTwoL2[4], resultTwoL2[5]);
                cout << "你的能力值增減為： " << "學科能力" << resultTwoL2[0] << "，" << "人緣" << resultTwoL2[1] << "，" << "魅力" << resultTwoL2[2] << "，" << "體能" << resultTwoL2[3] << "，" << "疲勞值" << resultTwoL2[4] << "，" << "幸運" << resultTwoL2[5] << "。" << endl;
            }
            break;
        case 3:
            if (playerPoints[2] >= standardThree[1]*week) {
                cout << resultThreeD1 << endl;
                p.modifyStats(resultThreeL1[0], resultThreeL1[1], resultThreeL1[2], resultThreeL1[3], resultThreeL1[4], resultThreeL1[5]);
                cout << "你的能力值增減為： " << "學科能力" << resultThreeL1[0] << "，" << "人緣" << resultThreeL1[1] << "，" << "魅力" << resultThreeL1[2] << "，" << "體能" << resultThreeL1[3] << "，" << "疲勞值" << resultThreeL1[4] << "，" << "幸運" << resultThreeL1[5] << "。" << endl;
            }
            else{
                cout << resultThreeD2 << endl;
                p.modifyStats(resultThreeL2[0], resultThreeL2[1], resultThreeL2[2], resultThreeL2[3], resultThreeL2[4], resultThreeL2[5]);
                cout << "你的能力值增減為： " << "學科能力" << resultThreeL2[0] << "，" << "人緣" << resultThreeL2[1] << "，" << "魅力" << resultThreeL2[2] << "，" << "體能" << resultThreeL2[3] << "，" << "疲勞值" << resultThreeL2[4] << "，" << "幸運" << resultThreeL2[5] << "。" << endl;
            }
            break;

        default:
            break;
    }
    
}

class TimeTriggerEvents : public Events
{
private:
    int week;
public:
    TimeTriggerEvents(int week, string description, string choicesD):Events::Events(description, choicesD), week(week){};
    bool checkWeek(int currentDay);
};

bool TimeTriggerEvents::checkWeek(int currentDay){
    if (this->week == currentDay) {
        return true;
    }
    return false;
}

class LevelTriggerEvents : public Events
{
private:
    int threshold[7];
    bool triggered; //有些事件trigger一次就好
public:
    LevelTriggerEvents(int academic, int popularity, int charm, int stamina, int fatigue, int lucky, string description, string choicesD);
    bool checkThreshold(Player& p, int week);
};


LevelTriggerEvents::LevelTriggerEvents(int academic, int popularity, int charm, int stamina, int fatigue, int lucky, string description, string choicesD) :Events::Events(description, choicesD){
    int temp[] = {academic, popularity, charm, stamina, fatigue, lucky};
    for (int i = 0; i < 6; ++i) {
        threshold[i] = temp[i];
    }
}

bool LevelTriggerEvents::checkThreshold(Player& p, int week){
    int temp[6] = {p.getAcademic(), p.getPopularity(), p.getCharm(), p.getStamina(), p.getFatigue(), p.getLucky()};
    for (int i=0; i<6; i++) {
        if (temp[i] < threshold[i]*week) {
            return false;
        }
    }
    return true;
}






// 事件系統
class EventSystem {
private:
    vector<pair<function<bool(const Player&)>, function<void(Player&)>>> randomEvents;
    
public:
    void addRandomEvent(function<bool(const Player&)> condition,
                       function<void(Player&)> event) {
        randomEvents.push_back({condition, event});
    }
    
    void tryTriggerEvent(Player& player) {
        random_device rd;
        mt19937 gen(rd());
        uniform_real_distribution<> dis(0, 1);
        
        for(const auto& event : randomEvents) {
            if(dis(gen) < 0.1 && event.first(player)) {  // 10% 觸發機率
                event.second(player);
                break;
            }
        }
    }
};

// 遊戲主體
class DatingGame {
private:
    Player player;
    vector<Character> characters;
    int currentDay;
    string currentLocation;
    EventSystem eventSystem;
    map<string, int> endings;  // 結局條件

public:
    DatingGame() : currentDay(1) {
        // 初始化角色
        characters.push_back(Character("角色1"));
        characters.push_back(Character("角色2"));
        characters.push_back(Character("角色3"));
        
        // 設定結局條件
        setupEndings();
        
        // 設定隨機事件
        setupRandomEvents();
    }
    void setGame(){ // 遊戲前導
        string playerName;
        int type;
        cout << ">>遊戲簡介：一名學測剩30週的高中美少女，要在短短的30週內出奇蹟";
        pause();
        cout <<">>期間會遇到許多出其不意的事情，合理的運用時間才能獲得理想的目標！考上台大吧！\\(^w^)/ " << "\n";
        showTXT("/Users/yuqian.h/Desktop/Programming/try_main/try_main/rule.txt");

        while (true) {
            cout << "請輸入你的名字: ";
            getline(cin, playerName);
            
            // 移除字串前後的空白
            playerName.erase(0, playerName.find_first_not_of(" \t\n\r\f\v"));
            playerName.erase(playerName.find_last_not_of(" \t\n\r\f\v") + 1);
            
            if (playerName.empty()) {
                cout << "名字不能為空！請重新輸入。\n";
            } else {
                cout << ">>你叫" << playerName << "嗎?  酷喔，聽起來就是電神的名字 \n";
                pause();
                break;
            }
        }

        cout << "你可以選擇成為這幾種類型的女主人翁：\n=====類型一：斯文書生=====\n       初始能力：\n學科值：100\n體能：20\n"
            <<"人緣：50\n魅力:10\n幸運:5";
        cout <<"\n=====類型二：社交花花=====\n       初始能力：\n學科值：20\n體能：50\n"
            <<"人緣：100\n魅力:20\n幸運:5";
        cout <<"\n=====類型三：排球少女=====\n       初始能力：\n學科值：50\n體能：100\n"
            <<"人緣：20\n魅力:15\n幸運:5\n";
        cout <<"(輸入想要類型的數字)：";

        while (true){
            cin >> type;
            if (type == 1 || type == 2 || type == 3 || type == 4 || type == 5) {
                cout << "你選擇了類型：" << type << "\n";
                break; // 輸入正確，跳出循環"
            } else {
                cout << "請重新輸入一次。不要玩我" << endl;
            }
        }
        cout << "學測";
        for (int i = 0; i < 6; ++i) {
            cout << "." << flush; // 輸出點並立即刷新緩衝區
            sleep(0.1); // 延遲 500 毫秒; // 延遲 0.5 秒
        } cout << "啟動";
        for (int i = 0; i < 3; ++i) {
            cout << "!" << flush; // 輸出點並立即刷新緩衝區
            sleep(0.1); // 延遲 500 毫秒; // 延遲 0.5 秒
        }
        Player player;
        player = Player(playerName, type);
    }
    void advanceDay() {
        currentDay++;
        player.updateStatus();
        eventSystem.tryTriggerEvent(player);
        checkEnding();
    }
    
    void setupEndings() {
        // 設定各種結局條件
    }
    
    void setupRandomEvents() {
        // 添加隨機事件
        eventSystem.addRandomEvent(
            [](const Player& p) { return true; },  // 條件
            [](Player& p) {
                cout << "觸發隨機事件！\n";
                p.modifyStats(5, 0, 0, 10, 0, 0);
            }
        );
    }
    
    void checkEnding() {
        // 檢查是否達到結局條件
        int score;
        if(player.getAcademic() >= 600)
            score = collegeTest("easy");
        else if (player.getAcademic() < 600 && player.getAcademic() >= 450)
            score = collegeTest("moderate");
        else score = collegeTest("hard");
        
    }
    int collegeTest(string level){
        cout << "今天是大考的日子......"<< "\n";
        pause();
        if(level == "easy"){
            cout << "第一題： \n (生物題)";
            return 0;
        }
        return 0;
    }
    
    void run(vector<TimeTriggerEvents*>& timeEvents, vector<LevelTriggerEvents*>& levelEvents, vector<Events*>& randomEvents) {
        
        while(true) {
            string command;
            displayStatus();
            bool eventHappened = false;
            for (int i=0; i<timeEvents.size(); i++) {
                if (timeEvents[i]->checkWeek(currentDay)) {
                    timeEvents[i]->makeChoices(player, currentDay);
                }
            }
            getline(cin, command);
            // 去掉所有空格
            int index = 0;
            
            for(char c: command){
                if(c != ' '){
                    command[index++] = c;
                    if (!eventHappened) {
                        random_device rd;
                        mt19937 gen(rd());
                        uniform_real_distribution<> dis(0, 1);
                        if (dis(gen)<0.2) {
                            cout << "觸發隨機事件！！";
                            randomEvents[0]->makeChoices(player, currentDay);
                            randomEvents.erase(randomEvents.begin());
                            eventHappened = true;
                        }
                    }
                    if (!eventHappened) {
                        for (int i=0; i<levelEvents.size(); i++) {
                            if (levelEvents[i]->checkThreshold(player, currentDay)) {
                                levelEvents[i]->makeChoices(player, currentDay);
                                levelEvents.erase(levelEvents.begin()+i);
                                eventHappened = true;
                                break;
                            }
                        }
                    }
                }
            }
            
            if(command == "Q") break;
            processCommand(command);
            command.clear();
            if(currentDay == 30){
                checkEnding();
                break;
            }
        }
    }

    void displayStatus() {
        cout << "=== Day " << currentDay << " ===\n";
        
        // 顯示其他狀態
        cout << "倒數" << 30 - currentDay << "週了...... 今天做點甚麼好呢？\n";
        if(player.getFatigue() > 50)
            cout << "好累喔......不想念書了，這破書愛讀誰讀\n";
        else if (player.getFatigue() > 100){
            cout << "破防了";
        }
        
        pause();
        
        currentDay ++;
    }

    void processCommand(const string& cmd) {
        // 處理玩家輸入
    }
    void pause() { // press Enter to continue
    string dummy;
    getline(cin, dummy);  // 不管輸入什麼，只要按 Enter 就會繼續
    }
};

int main() {
    
    vector<Events*> randomEvents;
    vector<TimeTriggerEvents*> timeEvents;
    vector<LevelTriggerEvents*> levelEvents;
    //events 以函數定好的format裝進vector寫在這裡

    DatingGame game;
    game.setGame();
    game.run(timeEvents, levelEvents, randomEvents);
    return 0;
}


